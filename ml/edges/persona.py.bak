import state, nodes
from utils import log_message
from langgraph.types import Send
import numpy as np

from utils import get_from_analysts, get_from_tools

def next_step_analyst(state: state.OverallState):
    if state["next_step"] == "done":
        return "end_of_conversation"
    elif get_from_tools(state["next_step"],state["tools"]):
        return "tool_node"
    else:
        ### Exact match failed, fill in the following function, we could do a soft search here
        return "end_of_conversation" ## Throw an Error?
    
def next_step_supervisor(state: state.OverallState):
    if state["next_step"] == "done":
        return "end_of_conversation"
    elif get_from_analysts(state["next_step"],state["analysts"]):
        return "analyst_node"
    else:
        ### Exact match failed, fill in the following function, we could do a soft search here
        return "analyst_node"
        

def agent_discussion_swarm(state: state.OverallState):
    log_message("---DISCUSSION BETWEEN AGENTS---")
    if state["analyst"] == "None" or state["num_discussion"] >= 7:
        return nodes.combine_discussion.__name__
    else:
        return nodes.agent_node_v1.__name__


def send_analysis_questions(state: state.InternalRAGState):
    """
    Sends the analysis questions to RAGs for agents context
    """
    question_groups = state["analysis_question_groups"]
    return [Send("agent_rag", {"question_group": group}) for group in question_groups]


def send_to_personas(state: state.OverallState):
    """
    Sends the analysis questions to RAGs for agents context
    """
    question_groups = state["subtasks"]
    return [Send("agent_persona", {"current_query": task,"current_analyst":get_from_analysts(persona,state["analysts"])}) for persona,task in question_groups]
