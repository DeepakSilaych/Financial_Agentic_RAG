from typing import List

from pydantic import BaseModel, Field
from langchain_core.prompts import ChatPromptTemplate
from utils import log_message
from database import FinancialDatabase

import state , nodes
from llm import llm
import uuid

from utils import send_logs
from config import LOGGING_SETTINGS


class ExpandedQuestions(BaseModel):
    """The structure for elaborated question generated by the expanding the original question."""

    elaborated_questions: str = Field(
        description="Contains the elaborated question and sub questions with all terms/topics clearly explained and elaborated as subtopics "
    )


_10k_structure = """
     - **Business Overview**: Information about the company’s operations, products, and markets.
     - **Risk Factors**: Key risks faced by the company.
     - **Management’s Discussion and Analysis (MD&A)**: Analysis of financial condition and operational results.
     - **Financial Statements**: Detailed financial data, including income statement, balance sheet, and cash flow statement.
     - **Legal Proceedings**: Any ongoing or pending legal actions.
     - **Executive Compensation**: Information on executive salaries and incentives (if relevant to the query).
     - **Notes to Financial Statements**: Explanations and details about accounting policies and financial data.
"""

_expansion_system_prompt1 = """
You are a finance expert. You are an expert in query expansion and decomposition, specializing in processing financial 10-K documents. Your task is to:

1. **Expand Broad Terms**: Identify vague or broad terms in the user query (e.g., "financial performance," "risks," or "liabilities") and replace them with specific, actionable terms. Use the structure of 10-K documents {structure} and domain-specific terminology (e.g., revenue, operating expenses, debt).

2. **Divide into Sub-Questions**: Break down the expanded query into smaller, logically grouped sub-questions. Each sub-question should focus on a specific part of the expanded query, allowing for parallel workflows.

3. **Ensure Context and Clarity**: Add necessary context, such as time frames (e.g., fiscal years or quarters), scope (e.g., entire document or specific sections), and granularity (e.g., high-level or detailed). Use the details about the documents present in the knowledge base in case the question expansion requires information about the documents. 

4. List Other Companies and years : If the query requires terms like other companies , other tech companies , other years. You need to specify those terms by listing the specific names / years from the Document details. 
Eg : In case of "other tech companies" find the names of all other tech companies from the names of the companies in the Documents details. 

Documents details : {db_state} 

- You can use the Document details if the query expansion task requires the information about some files ( company names or year ) in the knowledge base. 


**Format**:
1. Expanded query followed by multipe sub-questions derrived from the expanded query as a string

**Examples**:

1. **Input Query**: "Summarize financial performance."
   **Expanded Query**: "Summarize the company's financial performance as reported in the 10-K, focusing on revenue, profitability, operating expenses, and cash flow trends over the last fiscal year."
   **Sub-Questions**:
   - "What are the revenue trends over the last fiscal year?"
   - "What is the company’s profitability, including gross margin and net income?"
   - "How have operating expenses changed year over year?"
   - "What are the key cash flow trends reported?"

2. **Input Query**: "What are the risks?"
   **Expanded Query**: "Summarize the key risks faced by the company, as discussed in the Risk Factors section of the 10-K, focusing on operational, financial, market, and regulatory risks."
   **Sub-Questions**:
   - "What operational risks are mentioned in the Risk Factors section?"
   - "What financial risks are highlighted in the Risk Factors section?"
   - "What market risks are identified in the Risk Factors section?"
   - "What regulatory risks does the company face?"

3. **Input Query**: "Summarize liabilities."
   **Expanded Query**: "Summarize the company’s liabilities as detailed in the 10-K, focusing on total liabilities, short-term and long-term liabilities, and any significant changes compared to the previous fiscal year."
   **Sub-Questions**:
   - "What are the total liabilities reported in the 10-K?"
   - "What are the short-term liabilities, and how have they changed?"
   - "What are the long-term liabilities, and how have they changed?"
   - "Are there any notable changes or trends in liabilities compared to the previous fiscal year?"


**Output**:
1. Expanded query followed by multiple sub-questions derrived from the expanded query as a string


"""


question_expansion_prompt = ChatPromptTemplate.from_messages(
    [
        ("system", _expansion_system_prompt1),
        ("human", "Question: {question}"),
    ]
)
question_expander = question_expansion_prompt | llm.with_structured_output(
    ExpandedQuestions
)


def expand_question(state: state.OverallState):
    """
    Expand the user question to specify the broad terms clearly and optimize document retrieval.
    """
    log_message("---QUERY EXPANSION---")

    question = state["question"]
    db = FinancialDatabase()
    db_state = db.get_all_reports()
    state["db_state"] = db_state
    # res = question_expander.invoke(
   
    res = question_expander.invoke(
        {"structure": _10k_structure, "question": question , "db_state":db_state}
    )
    # expanded_questions = decomposed_questions.decomposed_questions

    log_message(f"Expanded question: {res}")

    expanded_question = res.elaborated_questions


    ###### log_tree part
    # import uuid , nodes 
    id = str(uuid.uuid4())
    child_node = nodes.expand_question.__name__ + "//" + id
    parent_node = state.get("prev_node" , "START")
    log_tree = {}

    if not LOGGING_SETTINGS['expand_question']:
        child_node = parent_node 
         
    log_tree[parent_node] = [child_node]
    ######

    
    ##### Server Logging part

    output_state = {
        "expanded_question" : expanded_question , 
        "db_state" : db_state , 
        "prev_node" : child_node,
        "log_tree" : log_tree ,
    }

    send_logs(
        parent_node = parent_node , 
        curr_node= child_node , 
        child_node=None , 
        input_state=state , 
        output_state=output_state , 
        text=child_node.split("//")[0] ,
    )
    
    ######

    return output_state 
